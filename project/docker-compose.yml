services:
  flask_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask
    restart: always
    depends_on:
      - db
    environment:
      POSTGRESQL_USER: ${POSTGRESQL_USER}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DB: ${POSTGRESQL_DATABASE}
      DATABASE_HOST: ${DATABASE_HOST}
      POSTGRESQL_DATABASE_PORT: 5432
    ports:
      - "5000:5000"
    networks:
      - mynetwork
    env_file:
      - .env
    command: [ "/wait-for-postgres.sh", "db", "gunicorn", "-w", "4", "--timeout", "120", "--bind", "0.0.0.0:5000", "main:app" ]

  # checker:
  #   build: .
  #   restart: always
  #   command: [ "./wait-for-postgres.sh", "db", "python", "-m", "app.database.checker" ]
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   environment:
  #     - PYTHONPATH=/app
  #     - POSTGRESQL_USER=${POSTGRESQL_USER}
  #     - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - POSTGRESQL_DB=${POSTGRESQL_DATABASE}
  #     - DATABASE_HOST=${DATABASE_HOST}
  #     - POSTGRESQL_DATABASE_PORT=5432
  #   networks:
  #     - mynetwork

  db:
    image: postgres:14
    platform: linux/amd64
    container_name: postgresql_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRESQL_DATABASE}
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - mynetwork
    volumes:
      - postgresql_data:/var/lib/postgresql/data

  nginx:
    image: nginx:1.24-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - flask_app
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgresql_data:
